<?php
/**
 * SalesTaxApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Ebay\Sell\Account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account API
 *
 * The Account API gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information. For details on the availability of the methods in this API, see Account API requirements and restrictions.
 *
 * The version of the OpenAPI document: v1.6.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ebay\Sell\Account\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ebay\Sell\Account\ApiException;
use Ebay\Sell\Account\Configuration;
use Ebay\Sell\Account\HeaderSelector;
use Ebay\Sell\Account\ObjectSerializer;

/**
 * SalesTaxApi Class Doc Comment
 *
 * @category Class
 * @package  Ebay\Sell\Account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesTaxApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     * @return void
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrReplaceSalesTax
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country for which you want to create tax table entry. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales-tax jurisdiction for the table entry you want to create. (required)
     * @param  \Ebay\Sell\Account\Model\SalesTaxBase $body A container that describes the how the sales tax is calculated. (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createOrReplaceSalesTax($country_code, $jurisdiction_id, $body)
    {
        $this->createOrReplaceSalesTaxWithHttpInfo($country_code, $jurisdiction_id, $body);
    }

    /**
     * Operation createOrReplaceSalesTaxWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country for which you want to create tax table entry. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales-tax jurisdiction for the table entry you want to create. (required)
     * @param  \Ebay\Sell\Account\Model\SalesTaxBase $body A container that describes the how the sales tax is calculated. (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrReplaceSalesTaxWithHttpInfo($country_code, $jurisdiction_id, $body)
    {
        $request = $this->createOrReplaceSalesTaxRequest($country_code, $jurisdiction_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createOrReplaceSalesTaxAsync
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country for which you want to create tax table entry. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales-tax jurisdiction for the table entry you want to create. (required)
     * @param  \Ebay\Sell\Account\Model\SalesTaxBase $body A container that describes the how the sales tax is calculated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrReplaceSalesTaxAsync($country_code, $jurisdiction_id, $body)
    {
        return $this->createOrReplaceSalesTaxAsyncWithHttpInfo($country_code, $jurisdiction_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrReplaceSalesTaxAsyncWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country for which you want to create tax table entry. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales-tax jurisdiction for the table entry you want to create. (required)
     * @param  \Ebay\Sell\Account\Model\SalesTaxBase $body A container that describes the how the sales tax is calculated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrReplaceSalesTaxAsyncWithHttpInfo($country_code, $jurisdiction_id, $body)
    {
        $returnType = '';
        $request = $this->createOrReplaceSalesTaxRequest($country_code, $jurisdiction_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrReplaceSalesTax'
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country for which you want to create tax table entry. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales-tax jurisdiction for the table entry you want to create. (required)
     * @param  \Ebay\Sell\Account\Model\SalesTaxBase $body A container that describes the how the sales tax is calculated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrReplaceSalesTaxRequest($country_code, $jurisdiction_id, $body)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling createOrReplaceSalesTax'
            );
        }
        // verify the required parameter 'jurisdiction_id' is set
        if ($jurisdiction_id === null || (is_array($jurisdiction_id) && count($jurisdiction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jurisdiction_id when calling createOrReplaceSalesTax'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createOrReplaceSalesTax'
            );
        }

        $resourcePath = '/sales_tax/{countryCode}/{jurisdictionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'countryCode' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }
        // path params
        if ($jurisdiction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jurisdictionId' . '}',
                ObjectSerializer::toPathValue($jurisdiction_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSalesTax
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table entry you want to delete. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction whose table entry you want to delete. (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSalesTax($country_code, $jurisdiction_id)
    {
        $this->deleteSalesTaxWithHttpInfo($country_code, $jurisdiction_id);
    }

    /**
     * Operation deleteSalesTaxWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table entry you want to delete. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction whose table entry you want to delete. (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSalesTaxWithHttpInfo($country_code, $jurisdiction_id)
    {
        $request = $this->deleteSalesTaxRequest($country_code, $jurisdiction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSalesTaxAsync
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table entry you want to delete. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction whose table entry you want to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSalesTaxAsync($country_code, $jurisdiction_id)
    {
        return $this->deleteSalesTaxAsyncWithHttpInfo($country_code, $jurisdiction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSalesTaxAsyncWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table entry you want to delete. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction whose table entry you want to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSalesTaxAsyncWithHttpInfo($country_code, $jurisdiction_id)
    {
        $returnType = '';
        $request = $this->deleteSalesTaxRequest($country_code, $jurisdiction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSalesTax'
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table entry you want to delete. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction whose table entry you want to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSalesTaxRequest($country_code, $jurisdiction_id)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling deleteSalesTax'
            );
        }
        // verify the required parameter 'jurisdiction_id' is set
        if ($jurisdiction_id === null || (is_array($jurisdiction_id) && count($jurisdiction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jurisdiction_id when calling deleteSalesTax'
            );
        }

        $resourcePath = '/sales_tax/{countryCode}/{jurisdictionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'countryCode' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }
        // path params
        if ($jurisdiction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jurisdictionId' . '}',
                ObjectSerializer::toPathValue($jurisdiction_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSalesTax
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction for the tax table entry you want to retrieve. (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ebay\Sell\Account\Model\SalesTax
     */
    public function getSalesTax($country_code, $jurisdiction_id)
    {
        list($response) = $this->getSalesTaxWithHttpInfo($country_code, $jurisdiction_id);
        return $response;
    }

    /**
     * Operation getSalesTaxWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction for the tax table entry you want to retrieve. (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ebay\Sell\Account\Model\SalesTax, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSalesTaxWithHttpInfo($country_code, $jurisdiction_id)
    {
        $request = $this->getSalesTaxRequest($country_code, $jurisdiction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ebay\Sell\Account\Model\SalesTax' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ebay\Sell\Account\Model\SalesTax', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ebay\Sell\Account\Model\SalesTax';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ebay\Sell\Account\Model\SalesTax',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSalesTaxAsync
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction for the tax table entry you want to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesTaxAsync($country_code, $jurisdiction_id)
    {
        return $this->getSalesTaxAsyncWithHttpInfo($country_code, $jurisdiction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSalesTaxAsyncWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction for the tax table entry you want to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesTaxAsyncWithHttpInfo($country_code, $jurisdiction_id)
    {
        $returnType = '\Ebay\Sell\Account\Model\SalesTax';
        $request = $this->getSalesTaxRequest($country_code, $jurisdiction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSalesTax'
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. (required)
     * @param  string $jurisdiction_id This path parameter specifies the ID of the sales tax jurisdiction for the tax table entry you want to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSalesTaxRequest($country_code, $jurisdiction_id)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling getSalesTax'
            );
        }
        // verify the required parameter 'jurisdiction_id' is set
        if ($jurisdiction_id === null || (is_array($jurisdiction_id) && count($jurisdiction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jurisdiction_id when calling getSalesTax'
            );
        }

        $resourcePath = '/sales_tax/{countryCode}/{jurisdictionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'countryCode' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }
        // path params
        if ($jurisdiction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jurisdictionId' . '}',
                ObjectSerializer::toPathValue($jurisdiction_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSalesTaxes
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ebay\Sell\Account\Model\SalesTaxes
     */
    public function getSalesTaxes($country_code)
    {
        list($response) = $this->getSalesTaxesWithHttpInfo($country_code);
        return $response;
    }

    /**
     * Operation getSalesTaxesWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum (required)
     *
     * @throws \Ebay\Sell\Account\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ebay\Sell\Account\Model\SalesTaxes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSalesTaxesWithHttpInfo($country_code)
    {
        $request = $this->getSalesTaxesRequest($country_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ebay\Sell\Account\Model\SalesTaxes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ebay\Sell\Account\Model\SalesTaxes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ebay\Sell\Account\Model\SalesTaxes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ebay\Sell\Account\Model\SalesTaxes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSalesTaxesAsync
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesTaxesAsync($country_code)
    {
        return $this->getSalesTaxesAsyncWithHttpInfo($country_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSalesTaxesAsyncWithHttpInfo
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesTaxesAsyncWithHttpInfo($country_code)
    {
        $returnType = '\Ebay\Sell\Account\Model\SalesTaxes';
        $request = $this->getSalesTaxesRequest($country_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSalesTaxes'
     *
     * @param  string $country_code This path parameter specifies the two-letter ISO 3166 code for the country whose tax table you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSalesTaxesRequest($country_code)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling getSalesTaxes'
            );
        }

        $resourcePath = '/sales_tax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($country_code)) {
            $country_code = ObjectSerializer::serializeCollection($country_code, '', true);
        }
        if ($country_code !== null) {
            $queryParams['country_code'] = $country_code;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
